// Code generated by "enumer -type=TodoStatus -text pkg/todo/todo.go"; DO NOT EDIT.

package todo

import (
	"fmt"
)

const _TodoStatusName = "DoneTodoWait"

var _TodoStatusIndex = [...]uint8{0, 4, 8, 12}

func (i TodoStatus) String() string {
	if i < 0 || i >= TodoStatus(len(_TodoStatusIndex)-1) {
		return fmt.Sprintf("TodoStatus(%d)", i)
	}
	return _TodoStatusName[_TodoStatusIndex[i]:_TodoStatusIndex[i+1]]
}

var _TodoStatusValues = []TodoStatus{0, 1, 2}

var _TodoStatusNameToValueMap = map[string]TodoStatus{
	_TodoStatusName[0:4]:  0,
	_TodoStatusName[4:8]:  1,
	_TodoStatusName[8:12]: 2,
}

// TodoStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TodoStatusString(s string) (TodoStatus, error) {
	if val, ok := _TodoStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TodoStatus values", s)
}

// TodoStatusValues returns all values of the enum
func TodoStatusValues() []TodoStatus {
	return _TodoStatusValues
}

// IsATodoStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TodoStatus) IsATodoStatus() bool {
	for _, v := range _TodoStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for TodoStatus
func (i TodoStatus) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for TodoStatus
func (i *TodoStatus) UnmarshalText(text []byte) error {
	var err error
	*i, err = TodoStatusString(string(text))
	return err
}
